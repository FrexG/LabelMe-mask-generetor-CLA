import os
import glob
import json
import numpy as np
import cv2 as cv
import pandas as pd
import argparse
from tqdm import tqdm
"""
Author: Fraol Gelana
Date : Nov,2022
==============================================================|
To run this applications, execute                             | 
**** python mask_from_annotation.py --source folder_path **** | 
==============================================================|
"""

def make_shapes(path):
    """
    Creates binary masks and corresponding csv labels for json annotations 
    generated by labelme app.
    -------------------------
        Parameters
            `path`: relative path of the folder containing the annotation for 
                    individual videos 
    """
    if os.path.exists(path):
        directories = os.listdir(path) # Find all the sub-directories and files
        print(f'[INFO ...] found {len(directories)} sub directories')

        for dir in directories: # Loop through all the directories and files
            images = [] 
            masks = []   
            current_path = os.path.join(path,dir)

            json_files = glob.glob(current_path+"/*.json") # find all .json files in the current directory
            # read the contents of each json file
            for file in tqdm(json_files):
                with open(file) as f:
                    data = json.load(f)
                    image_path = os.path.join(current_path,data["imagePath"])

                    im = cv.imread(image_path)
                    mask = np.zeros((im.shape[0],im.shape[1]))

                    for shape in data["shapes"]: # Draw polly for each pollygon in the annotation
                        mask = cv.fillPoly(mask,np.array([shape["points"]],np.int32),color=255)

                    images.append(os.path.join(dir,data['imagePath']))

                    mask_filename = f"{data['imagePath'].split('.')[0]}_mask.jpg"
                    masks.append(os.path.join(dir,mask_filename))

                    cv.imwrite(os.path.join(current_path,f"{data['imagePath'].split('.')[0]}_mask.jpg"),mask) # save mask to file

            if len(masks) > 0:
                df = pd.DataFrame({'images_names':images,'mask_names':masks})
                df.to_csv(f'{current_path}/annotations.csv')
    else:
        raise(FileNotFoundError)


# Create the parser object
parser = argparse.ArgumentParser()
# Add an argument
parser.add_argument('--source',type=str,required=True) 
# source (path of the directory containing the annotations)
# Parse the argument
args = parser.parse_args()

make_shapes(args.source)

